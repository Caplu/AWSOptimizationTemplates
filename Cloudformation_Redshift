{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "SNSTopicName": {
            "Description": "What do you want to call your SNS topic?",
            "Default": "BillingNotification",
            "Type": "String"
        },
        "YourEmail": {
            "Description": "Email address for notifications",
            "Type": "String"
        },
        "S3StagingBucketName": {
            "Description": "The bucket that we will use to stage the data",
            "Type": "String"
        },
        "DatabaseName": {
            "Description": "The name of the first database to be created when the cluster is created",
            "Type": "String",
            "Default": "billingdb",
            "AllowedPattern": "([a-z]|[0-9])+"
        },
        "ClusterType": {
            "Description": "The type of cluster",
            "Type": "String",
            "Default": "single-node",
            "AllowedValues": [
                "single-node",
                "multi-node"
            ]
        },
        "NumberOfNodes": {
            "Description": "The number of compute nodes in the cluster. For multi-node clusters, the NumberOfNodes parameter must be greater than 1",
            "Type": "Number",
            "Default": "1"
        },
        "NodeType": {
            "Description": "The type of node to be provisioned",
            "Type": "String",
            "Default": "dw2.large",
            "AllowedValues": [
                "dw1.xlarge",
                "dw1.8xlarge",
                "dw2.large",
                "dw2.8xlarge"
            ]
        },
        "MasterUsername": {
            "Description": "The user name that is associated with the master user account for the cluster that is being created",
            "Type": "String",
            "Default": "admin",
            "AllowedPattern": "([a-z])([a-z]|[0-9])*"
        },
        "MasterUserPassword": {
            "Description": "The password that is associated with the master user account for the cluster that is being created.",
            "Type": "String",
            "Default": "admin123ADMIN",
            "NoEcho": "true"
        },
        "InboundTraffic": {
            "Description": "Allow inbound traffic to the cluster from this CIDR range.",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "PortNumber": {
            "Description": "The port number on which the cluster accepts incoming connections.",
            "Type": "Number",
            "Default": "5439"
        }
    },
    "Conditions": {
        "IsMultiNodeCluster": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterType"
                },
                "multi-node"
            ]
        }
    },
    "Resources": {
        "BillingSNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "YourEmail"
                        },
                        "Protocol": "email"
                    }
                ],
                "TopicName": {
                    "Ref": "SNSTopicName"
                }
            }
        },        
        "S3StagingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": {
                    "Ref": "S3StagingBucketName"
                }
            }
        },
        "RedshiftCluster": {
            "Type": "AWS::Redshift::Cluster",
            "DependsOn": "AttachGateway",
            "Properties": {
                "ClusterType": {
                    "Ref": "ClusterType"
                },
                "NumberOfNodes": {
                    "Fn::If": [
                        "IsMultiNodeCluster",
                        {
                            "Ref": "NumberOfNodes"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "NodeType": {
                    "Ref": "NodeType"
                },
                "DBName": {
                    "Ref": "DatabaseName"
                },
                "MasterUsername": {
                    "Ref": "MasterUsername"
                },
                "MasterUserPassword": {
                    "Ref": "MasterUserPassword"
                },
                "ClusterParameterGroupName": {
                    "Ref": "RedshiftClusterParameterGroup"
                },
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "ClusterSubnetGroupName": {
                    "Ref": "RedshiftClusterSubnetGroup"
                },
                "PubliclyAccessible": "true",
                "Port": {
                    "Ref": "PortNumber"
                }
            }
        },
        "RedshiftClusterParameterGroup": {
            "Type": "AWS::Redshift::ClusterParameterGroup",
            "Properties": {
                "Description": "Cluster parameter group",
                "ParameterGroupFamily": "redshift-1.0",
                "Parameters": [
                    {
                        "ParameterName": "enable_user_activity_logging",
                        "ParameterValue": "true"
                    }
                ]
            }
        },
        "RedshiftClusterSubnetGroup": {
            "Type": "AWS::Redshift::ClusterSubnetGroup",
            "Properties": {
                "Description": "Cluster subnet group",
                "SubnetIds": [
                    {
                        "Ref": "PublicSubnet"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16"
            }
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.0.0/24",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "InboundTraffic"
                        },
                        "FromPort": {
                            "Ref": "PortNumber"
                        },
                        "ToPort": {
                            "Ref": "PortNumber"
                        },
                        "IpProtocol": "tcp"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SGIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "SecurityGroup"
                },
                "SourceSecurityGroupId": {
                    "Ref": "SecurityGroup"
                },
                "FromPort": {
                    "Ref": "PortNumber"
                },
                "ToPort": {
                    "Ref": "PortNumber"
                },
                "IpProtocol": "tcp"
            }
        },
        "myInternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "myInternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "myInternetGateway"
                }
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        }
    },
    "Outputs": {
        "ClusterEndpoint": {
            "Description": "Redshift Cluster endpoint. Use this in Tableau.",
            "Value": {
                "Fn::GetAtt": [
                                "RedshiftCluster",
                                "Endpoint.Address"
							]
            }
        },		
        "ClusterId": {
            "Description": "Id of Redshift cluster. Use this in the Data Pipeline script - replace redshift-clusterid",
            "Value": {
                "Ref": "RedshiftCluster"
            }
        },
        "SecurityGroupName": {
            "Description": "Name of security group. Use this in the Data Pipeline script - replace sg-example",
            "Value": {
                "Ref": "SecurityGroup"
            }
        },
        "SubnetName": {
            "Description": "Name of subnet. Use this in the Date Pipeline script - replace subnet-example",
            "Value": {
                "Ref": "PublicSubnet"
            }
        },
        "SNSid": {
            "Description": "The SNS ID - replace arn:aws:sns:example",
            "Value": {
                "Ref": "BillingSNSTopic"
            }
        },
        "S3BucketName": {
            "Description": "The storage bucket to be used in data pipeline - replace storagebucket",
            "Value": {
                "Ref": "S3StagingBucket"
            }
        }
    }
}
